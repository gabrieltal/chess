{"version":3,"sources":["components/square.jsx","components/board.jsx","components/playercard.jsx","components/scoreboard.jsx","models/piece.js","models/knight.js","models/bishop.js","models/king.js","models/queen.js","models/rook.js","models/pawn.js","models/history.js","models/player.js","models/square.js","components/game.jsx","app.js","reportWebVitals.js","index.js"],"names":["Square","this","props","piece","className","cssClasses","onClick","src","image","alt","name","React","Component","Board","square","bgColor","lastMove","move_from","index","move_to","selectedSquare","checkmate","restart","displayedBoard","x","boardRow","y","push","renderSquare","squares","href","message","PlayerCard","graveyard","map","i","height","width","player","color","current","displayGraveyard","Scoreboard","moves","whiteMove","blackMove","moveList","length","notation","players","whiteGraveyard","displayMoveList","blackGraveyard","Piece","pieceName","hasMoved","position","Knight","currentPosition","options","possibleMove","possibilities","canMoveUp","canMoveLeft","teamPieceAtSquare","canMoveRight","canMoveDown","spaces","Bishop","atLeftBorder","atTopBorder","enemyPieceAtSquare","pieceAtSquare","atRightBorder","atBottomBorder","King","Queen","indexAtPosition","step","centerMovePossible","leftMovePossible","rightMovePossible","indexAtCenter","indexAtLeftDiagonal","indexAtRightDiagonal","direction","Rook","Pawn","baseMovement","History","description","translateToChessNotation","moveDescription","capture","promotion","suffix","castle","constructor","getColumn","getRow","check","Player","row","column","defaultBgColor","possibleMoves","Game","setPlayers","state","initializeBoard","history","Array","fill","col","pieces","destinationSquare","includes","previewMove","initSquares","cloneDeep","squareClicked","validateSelectedSquare","selectSquare","validateMove","movePiece","canCastle","canEnPassant","enpassant","setState","oldState","rookSquare","getCastlingRook","enPassantSquare","getEnPassantPawn","nextPlayer","logMove","kingSquare","find","enemySquares","idx","teammates","teammate","availableMove","enemyPawnSquare","Math","abs","squaresBetweenKingAndRook","squaresBetweenLocations","squaresBetweenKingAndDestination","j","castlingSquare","square1","square2","squaresBetween","handleClick","App","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e815854.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Square extends React.Component {\n  render() {\n    if (this.props.piece) {\n      return (\n        <div className={`square ${this.props.cssClasses}`} onClick={this.props.onClick}>\n          <img src={this.props.piece.image} alt={this.props.piece.name}/>\n        </div>\n      );\n    } else {\n      return (\n        <div className={`square ${this.props.cssClasses}`} onClick={this.props.onClick}>\n          <span className=\"sr-only\">empty square</span>\n        </div>\n      );\n    }\n  }\n};\n","import Square from './square';\nimport React from 'react';\n\nexport default class Board extends React.Component {\n  renderSquare(square) {\n    let cssClasses = square.bgColor;\n\n    if (this.props.lastMove?.move_from === square.index || this.props.lastMove?.move_to === square.index) {\n      cssClasses = 'bg-orange';\n    } else if (this.props.selectedSquare?.piece === square.piece) {\n      cssClasses += ' border-blue';\n    }\n\n    if (this.props.checkmate) {\n      return <Square key={square.index} piece={square.piece} cssClasses={cssClasses} />;\n    } else {\n      return <Square key={square.index} piece={square.piece} cssClasses={cssClasses} onClick={() => this.props.onClick(square)} />;\n    }\n  }\n\n  render() {\n    let displayedBoard = [];\n    let index = 0;\n\n    for (var x = 0; x < 8; x++) {\n      let boardRow = [];\n      for (var y = 0; y < 8; y++) {\n        boardRow.push(this.renderSquare(this.props.squares[index]));\n        index += 1;\n      }\n      displayedBoard.push(<div className=\"row\" key={x}>{boardRow}</div>);\n    }\n\n    let restart;\n\n    if (this.props.checkmate) {\n      restart = <a href=\"/\">Play again?</a>;\n    }\n\n    return (\n      <div className=\"board my-2\">\n        {displayedBoard}\n        <p>{this.props.message}</p>\n        {restart}\n      </div>\n    );\n  }\n};\n","import React from 'react';\n\nexport default class PlayerCard extends React.Component {\n  displayGraveyard() {\n    return this.props.graveyard.map((piece, i) => {\n      return <img key={`${piece.name}-${i}`} src={piece.image} alt={piece.name} height=\"20px\" width=\"20px\"/>;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"player-card bg-white d-flex flex-column justify-content-between p-1 m-2\">\n        <div className=\"d-flex justify-content-between\">\n          <h2 className=\"m-0 capitalize\">{this.props.player.color}</h2>\n          <span className={`bg-grey p-1 white badge ${this.props.current === this.props.player ? 'bg-blue' : 'bg-grey' }`}>Your turn</span>\n        </div>\n\n        <div className=\"graveyard d-flex\">\n          {this.displayGraveyard()}\n        </div>\n      </div>\n    );\n  }\n};\n","import React from 'react';\nimport PlayerCard from './playercard';\n\nexport default class Scoreboard extends React.Component {\n  displayMoveList(moves) {\n    const moveList = [];\n    let whiteMove, blackMove;\n\n    for (let i = 0; i < moves.length; i++) {\n      whiteMove = moves[i];\n      blackMove = null;\n\n      if (i !== (moves.length - 1)) {\n        i += 1;\n        blackMove = moves[i];\n      }\n\n      moveList.push(\n        <li key={i}>\n          <div className=\"move-description\">\n            <span>{whiteMove.notation}</span>\n            <span>{blackMove?.notation}</span>\n          </div>\n        </li>\n      );\n    }\n\n    return moveList;\n  }\n\n  render() {\n    return (\n      <section className=\"scoreboard h-100 d-flex flex-column justify-content-between\">\n        <PlayerCard player={this.props.players['black']} current={this.props.current} graveyard={this.props.whiteGraveyard} />\n        <div className=\"h-100 p-2\">\n          <div className=\"move-history bg-white h-100 scrollable\">\n            <ol className=\"d-inline-block\">\n              {this.displayMoveList(this.props.moves)}\n            </ol>\n          </div>\n        </div>\n        <PlayerCard player={this.props.players['white']} current={this.props.current} graveyard={this.props.blackGraveyard} />\n      </section>\n    );\n  }\n};\n","export default class Piece {\n  constructor(color, pieceName) {\n    this.color = color;\n    this.hasMoved = false;\n    this.image = `/${pieceName}-${color}.png`;\n    this.name = `${color} ${pieceName}`;\n  }\n\n  pieceAtSquare(squares, index) {\n    return squares[index] && squares[index].piece;\n  }\n\n  teamPieceAtSquare(squares, index) {\n    return squares[index].piece && squares[index].piece.color === this.color;\n  }\n\n  enemyPieceAtSquare(squares, index) {\n    return squares[index] && squares[index].piece && squares[index].piece.color !== this.color;\n  }\n\n  atLeftBorder(position) {\n    return position % 8 === 0;\n  }\n\n  atRightBorder(position) {\n    return (position + 1) % 8 === 0;\n  }\n\n  atTopBorder(position) {\n    return position < 7;\n  }\n\n  atBottomBorder(position) {\n    return position > 55;\n  }\n}\n","import Piece from './piece';\n\nexport default class Knight extends Piece {\n  constructor(color) {\n    super(color, 'knight');\n  }\n\n  possibleMoves(squares, currentPosition, options) {\n    const possibilities = [];\n    let possibleMove;\n\n    if (this.canMoveUp(currentPosition, 2)) {\n      // Check 2 up, 1 left move\n      possibleMove = currentPosition - 17;\n      if (this.canMoveLeft(currentPosition, 1) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n\n      // Check 2 up, 1 right move\n      possibleMove = currentPosition - 15;\n      if (this.canMoveRight(currentPosition, 1) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    if (this.canMoveUp(currentPosition, 1)) {\n      // Check 1 up, 2 left move\n      possibleMove = currentPosition - 10;\n      if (this.canMoveLeft(currentPosition, 2) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n\n      // Check 1 up, 2 right move\n      possibleMove = currentPosition - 6;\n      if (this.canMoveRight(currentPosition, 2) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    if (this.canMoveDown(currentPosition, 2)) {\n      // Check 2 down, 1 left move\n      possibleMove = currentPosition + 15;\n      if (this.canMoveLeft(currentPosition, 1) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n\n      // Check 2 down, 1 right move\n      possibleMove = currentPosition + 17;\n      if (this.canMoveRight(currentPosition, 1) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    if (this.canMoveDown(currentPosition, 1)) {\n      // Check 1 down, 2 left move\n      possibleMove = currentPosition + 6;\n      if (this.canMoveLeft(currentPosition, 2) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n\n\n      // Check 1 down, 2 right move\n      possibleMove = currentPosition + 10;\n      if (this.canMoveRight(currentPosition, 2) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    return possibilities;\n  }\n\n  canMoveUp(currentPosition, spaces = 1) {\n    if (spaces === 2) {\n      return currentPosition > 15;\n    } else {\n      return currentPosition > 7;\n    }\n  }\n\n  canMoveLeft(currentPosition, spaces = 1) {\n    if (spaces === 2) {\n      return (currentPosition - 1) % 8 !== 0 && currentPosition % 8 !== 0;\n    } else {\n      return currentPosition % 8 !== 0;\n    }\n  }\n\n  canMoveRight(currentPosition, spaces = 1) {\n    if (spaces === 2) {\n      return (currentPosition + 2) % 8 !== 0 && (currentPosition + 1) % 8 !== 0;\n    } else {\n      return (currentPosition + 1) % 8 !== 0;\n    }\n  }\n\n  canMoveDown(currentPosition, spaces = 2) {\n    if (spaces === 2) {\n      return currentPosition < 48;\n    } else {\n      return currentPosition < 56;\n    }\n  }\n}\n","import Piece from './piece';\n\nexport default class Bishop extends Piece {\n  constructor(color) {\n    super(color, 'bishop');\n  }\n\n  possibleMoves(squares, currentPosition, options) {\n    const possibilities = [];\n    let possibleMove;\n\n    // Add moves from the top left diagonal\n    possibleMove = currentPosition;\n    while(!this.atLeftBorder(possibleMove) && !this.atTopBorder(possibleMove)) {\n      possibleMove -= 9;\n      if (this.enemyPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n        break;\n      } else if (this.pieceAtSquare(squares, possibleMove)) {\n        break;\n      } else {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    // Add moves from the top right diagonal\n    possibleMove = currentPosition;\n    while(!this.atRightBorder(possibleMove) && !this.atTopBorder(possibleMove)) {\n      possibleMove -= 7;\n\n      if (this.enemyPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n        break;\n      } else if (this.pieceAtSquare(squares, possibleMove)) {\n        break;\n      } else {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    // Add moves from the bottom left diagonal\n    possibleMove = currentPosition;\n    while(!this.atLeftBorder(possibleMove) && !this.atBottomBorder(possibleMove)) {\n      possibleMove += 7;\n\n      if (this.enemyPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n        break;\n      } else if (this.pieceAtSquare(squares, possibleMove)) {\n        break;\n      } else {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    // Add moves from the bottom right diagonal\n    possibleMove = currentPosition;\n    while(!this.atRightBorder(possibleMove) && !this.atBottomBorder(possibleMove)) {\n      possibleMove += 9;\n\n      if (this.enemyPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n        break;\n      } else if (this.pieceAtSquare(squares, possibleMove)) {\n        break;\n      } else {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    return possibilities;\n  }\n}\n","import Piece from './piece';\n\nexport default class King extends Piece {\n  constructor(color) {\n    super(color, 'king');\n  }\n\n  possibleMoves(squares, currentPosition, options) {\n    const possibilities = [];\n    let possibleMove;\n\n    if (!this.atTopBorder(currentPosition)) {\n      // Check up move\n      possibleMove = currentPosition - 8;\n      if (!this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n\n      // Check directly up left diagonal move\n      possibleMove = currentPosition - 9;\n      if (!this.atLeftBorder(currentPosition) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n\n      // Check directly up right diagonal move\n      possibleMove = currentPosition - 7;\n      if (!this.atRightBorder(currentPosition) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    // Check left move\n    possibleMove = currentPosition - 1;\n    if (!this.atLeftBorder(currentPosition) && !this.teamPieceAtSquare(squares, possibleMove)) {\n      possibilities.push(possibleMove);\n    }\n\n    // Check right move\n    possibleMove = currentPosition + 1;\n    if (!this.atRightBorder(currentPosition) && !this.teamPieceAtSquare(squares, possibleMove)) {\n      possibilities.push(possibleMove);\n    }\n\n    if (!this.atBottomBorder(currentPosition)) {\n      // Check down move\n      possibleMove = currentPosition + 8;\n      if (!this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n\n      // Check directly down left diagonal move\n      possibleMove = currentPosition + 7;\n      if (!this.atLeftBorder(currentPosition) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n\n      // Check directly down right diagonal move\n      possibleMove = currentPosition + 9;\n      if (!this.atRightBorder(currentPosition) && !this.teamPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    return possibilities;\n  }\n}\n","import Piece from './piece';\n\nexport default class Queen extends Piece {\n  constructor(color, position) {\n    super(color, 'queen');\n  }\n\n  possibleMoves(squares, currentPosition, options) {\n    const possibilities = [];\n    let step = 1;\n    let indexAtPosition;\n    let centerMovePossible = true;\n    let leftMovePossible = true;\n    let rightMovePossible = true;\n\n    // Move up\n    while(this.indexAtCenter(currentPosition, step, 'up') > 0) {\n      if (leftMovePossible) {\n        indexAtPosition = this.indexAtLeftDiagonal(currentPosition, step, 'up');\n\n        if (this.enemyPieceAtSquare(squares, indexAtPosition)) {\n          possibilities.push(indexAtPosition);\n          leftMovePossible = false;\n        } else if (this.pieceAtSquare(squares, indexAtPosition)) {\n          leftMovePossible = false;\n        } else if (indexAtPosition % 8 === 0) {\n          possibilities.push(indexAtPosition);\n          leftMovePossible = false;\n        } else {\n          possibilities.push(indexAtPosition);\n        }\n      }\n\n      if (centerMovePossible) {\n        indexAtPosition = this.indexAtCenter(currentPosition, step, 'up');\n\n        if (this.enemyPieceAtSquare(squares, indexAtPosition)) {\n          possibilities.push(indexAtPosition);\n          centerMovePossible = false;\n        } else if (this.pieceAtSquare(squares, indexAtPosition)) {\n          centerMovePossible = false;\n        } else {\n          possibilities.push(indexAtPosition);\n        }\n      }\n\n      if (rightMovePossible) {\n        indexAtPosition = this.indexAtRightDiagonal(currentPosition, step, 'up');\n\n        if (this.enemyPieceAtSquare(squares, indexAtPosition)) {\n          possibilities.push(indexAtPosition);\n          rightMovePossible = false;\n        } else if (this.pieceAtSquare(squares, indexAtPosition)) {\n          rightMovePossible = false;\n        } else if ((indexAtPosition + 1) % 8 === 0) {\n          possibilities.push(indexAtPosition);\n          rightMovePossible = false;\n        } else {\n          possibilities.push(indexAtPosition);\n        }\n      }\n\n      step += 1;\n    }\n\n    // Move down\n    step = 1;\n    leftMovePossible = true;\n    rightMovePossible = true;\n    centerMovePossible = true;\n    while(this.indexAtCenter(currentPosition, step, 'down') < 64) {\n      if (leftMovePossible) {\n        indexAtPosition = this.indexAtLeftDiagonal(currentPosition, step, 'down');\n\n        if (this.enemyPieceAtSquare(squares, indexAtPosition)) {\n          possibilities.push(indexAtPosition);\n          leftMovePossible = false;\n        } else if (this.pieceAtSquare(squares, indexAtPosition)) {\n          leftMovePossible = false;\n        } else if (indexAtPosition % 8 === 0) {\n          possibilities.push(indexAtPosition);\n          leftMovePossible = false;\n        } else {\n          possibilities.push(indexAtPosition);\n        }\n      }\n\n      if (centerMovePossible) {\n        indexAtPosition = this.indexAtCenter(currentPosition, step, 'down');\n\n        if (this.enemyPieceAtSquare(squares, indexAtPosition)) {\n          possibilities.push(indexAtPosition);\n          centerMovePossible = false;\n        } else if (this.pieceAtSquare(squares, indexAtPosition)) {\n          centerMovePossible = false;\n        } else {\n          possibilities.push(indexAtPosition);\n        }\n      }\n\n      if (rightMovePossible) {\n        indexAtPosition = this.indexAtRightDiagonal(currentPosition, step, 'down');\n\n        if (this.enemyPieceAtSquare(squares, indexAtPosition)) {\n          possibilities.push(indexAtPosition);\n          rightMovePossible = false;\n        } else if (this.pieceAtSquare(squares, indexAtPosition)) {\n          rightMovePossible = false;\n        } else if ((indexAtPosition + 1) % 8 === 0) {\n          possibilities.push(indexAtPosition);\n          rightMovePossible = false;\n        } else {\n          possibilities.push(indexAtPosition);\n        }\n      }\n\n      step += 1;\n    }\n\n    // Move horizontal\n    step = 1;\n    let canMoveLeft = currentPosition % 8 === 0 ? false : true;\n    let canMoveRight = (currentPosition + 1) % 8 === 0 ? false : true;\n    while (canMoveLeft || canMoveRight) {\n      if (canMoveLeft) {\n        indexAtPosition = currentPosition - step;\n        if (this.enemyPieceAtSquare(squares, indexAtPosition)) {\n          possibilities.push(indexAtPosition);\n          canMoveLeft = false;\n        } else if (this.pieceAtSquare(squares, indexAtPosition)) {\n          canMoveLeft = false;\n        } else if (indexAtPosition % 8 === 0) {\n          possibilities.push(indexAtPosition);\n          canMoveLeft = false;\n        } else {\n          possibilities.push(indexAtPosition);\n        }\n      }\n\n      if (canMoveRight) {\n        indexAtPosition = currentPosition + step;\n        if (this.enemyPieceAtSquare(squares, indexAtPosition)) {\n          possibilities.push(indexAtPosition);\n          canMoveRight = false;\n        } else if (this.pieceAtSquare(squares, indexAtPosition)) {\n          canMoveRight = false;\n        } else if ((indexAtPosition + 1) % 8 === 0) {\n          possibilities.push(indexAtPosition);\n          canMoveRight = false;\n        } else {\n          possibilities.push(indexAtPosition);\n        }\n      }\n\n      step += 1;\n    }\n\n    return possibilities;\n  }\n\n  indexAtCenter(currentPosition, step, direction) {\n    if (direction === 'up') {\n      return currentPosition - (8 * step);\n    } else if (direction === 'down') {\n      return currentPosition + (8 * step);\n    }\n  }\n\n  indexAtLeftDiagonal(currentPosition, step, direction) {\n    if (direction === 'up') {\n      return currentPosition - (8 * step) - step;\n    } else if (direction === 'down') {\n      return currentPosition + (8 * step) - step;\n    }\n  }\n\n  indexAtRightDiagonal(currentPosition, step, direction) {\n    if (direction === 'up') {\n      return currentPosition - (8 * step) + step;\n    } else if (direction === 'down') {\n      return currentPosition + (8 * step) + step;\n    }\n  }\n}\n","import Piece from './piece'\n\nexport default class Rook extends Piece {\n  constructor(color, position) {\n    super(color, 'rook')\n  }\n\n  possibleMoves(squares, currentPosition, options) {\n    const possibilities = [];\n    let possibleMove;\n\n    // Move up\n    possibleMove = currentPosition - 8;\n    while(possibleMove > 0) {\n      if (this.enemyPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n        break;\n      } else if (this.pieceAtSquare(squares, possibleMove)) {\n        break;\n      } else {\n        possibilities.push(possibleMove);\n      }\n      possibleMove -= 8;\n    }\n\n    // Move down\n    possibleMove = currentPosition + 8;\n    while(possibleMove < 64) {\n      if (this.enemyPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n        break;\n      } else if (this.pieceAtSquare(squares, possibleMove)) {\n        break;\n      } else {\n        possibilities.push(possibleMove);\n      }\n      possibleMove += 8;\n    }\n\n    // Move left\n    possibleMove = currentPosition;\n    while(possibleMove % 8 !== 0) {\n      possibleMove -= 1;\n      if (this.enemyPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n        break;\n      } else if (this.pieceAtSquare(squares, possibleMove)) {\n        break;\n      } else {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    // Move right\n    possibleMove = currentPosition;\n    while((possibleMove + 1) % 8 !== 0) {\n      possibleMove += 1;\n      if (this.enemyPieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n        break;\n      } else if (this.pieceAtSquare(squares, possibleMove)) {\n        break;\n      } else {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    return possibilities;\n  }\n}\n","import Piece from './piece';\n\nexport default class Pawn extends Piece {\n  constructor(color) {\n    super(color, 'pawn');\n  }\n\n  possibleMoves(squares, currentPosition, options) {\n    const possibilities = [];\n    let possibleMove;\n    // White pieces move up the board\n    // Black pieces move down the board\n    let baseMovement = this.color === 'white' ? -8 : 8;\n\n    // Pawns can move up one unless there is a piece in the way\n    possibleMove = currentPosition + baseMovement;\n    if (!this.pieceAtSquare(squares, possibleMove)) {\n      possibilities.push(possibleMove);\n\n      // If the Pawn hasn't moved yet it can move up two unless there is a piece in the way\n      possibleMove += baseMovement;\n      if (!this.hasMoved && !this.pieceAtSquare(squares, possibleMove)) {\n        possibilities.push(possibleMove);\n      }\n    }\n\n    // If there is an enemy at the left diagonal of the pawn then we can strike it\n    possibleMove = currentPosition + baseMovement - 1;\n    if (this.enemyPieceAtSquare(squares, possibleMove)) {\n      possibilities.push(possibleMove);\n    }\n\n    // If there is an enemy at the left diagonal of the pawn then we can strike it\n    possibleMove = currentPosition + baseMovement + 1;\n    if (this.enemyPieceAtSquare(squares, possibleMove)) {\n      possibilities.push(possibleMove);\n    }\n\n    // TODO: Need to figure out en passant logic here\n\n    return possibilities;\n  }\n}\n","export default class History {\n  constructor() {\n    this.moves = [];\n  }\n\n  logMove(description) {\n    description['notation'] = this.translateToChessNotation(\n      description\n    );\n    this.moves.push(description);\n    return description;\n  }\n\n  lastMove() {\n    return this.moves[this.moves.length - 1];\n  }\n\n  translateToChessNotation(moveDescription) {\n    const PIECE_DICTIONARY = {\n      Pawn: '',\n      King: 'K',\n      Queen: 'Q',\n      Bishop: 'B',\n      Knight: 'N',\n      Rook: 'R'\n    };\n    let piece, capture, x, y, promotion, suffix;\n\n    if (moveDescription.castle) {\n      if (moveDescription.move_to > moveDescription.move_from) {\n        return '0-0';\n      } else {\n        return '0-0-0';\n      }\n    }\n\n\n    piece = PIECE_DICTIONARY[moveDescription.piece.constructor.name];\n    x = this.getColumn(moveDescription.move_to);\n    y = this.getRow(moveDescription.move_to);\n\n    if (moveDescription.checkmate) {\n      suffix = '#';\n    } else if (moveDescription.check) {\n      suffix = '+';\n    } else {\n      suffix = '';\n    }\n\n    if (moveDescription.capture && moveDescription.piece.constructor.name === 'Pawn') {\n      capture = this.getColumn(moveDescription.move_from);\n      capture += 'x';\n    } else if (moveDescription.capture) {\n      capture = 'x';\n    } else {\n      capture = '';\n    }\n\n    if (moveDescription.promotion) {\n      promotion = '=Q'\n    } else {\n      promotion = '';\n    }\n\n    return `${piece}${capture}${x}${y}${promotion}${suffix}`;\n  }\n\n  getColumn(index) {\n    if (index % 8 === 0) {\n      return 'a';\n    } else if ((index - 1) % 8 === 0) {\n      return 'b';\n    } else if ((index - 2) % 8 === 0) {\n      return 'c';\n    } else if ((index - 3) % 8 === 0) {\n      return 'd';\n    } else if ((index - 4) % 8 === 0) {\n      return 'e';\n    } else if ((index - 5) % 8 === 0) {\n      return 'f';\n    } else if ((index - 6) % 8 === 0) {\n      return 'g';\n    } else {\n      return 'h';\n    }\n  }\n\n  getRow(index) {\n    if (index < 8) {\n      return '8';\n    } else if (index < 16) {\n      return '7';\n    } else if (index < 24) {\n      return '6';\n    } else if (index < 32) {\n      return '5';\n    } else if (index < 40) {\n      return '4';\n    } else if (index < 48) {\n      return '3';\n    } else if (index < 56) {\n      return '2';\n    } else {\n      return '1';\n    }\n  }\n}\n","export default class Player {\n  constructor(color) {\n    this.color = color;\n  }\n}\n","export default class Square {\n  constructor(index, row, column, piece = null) {\n    this.index = index;\n    this.row = row;\n    this.column = column;\n    this.piece = piece;\n    this.bgColor = this.defaultBgColor();\n  }\n\n  defaultBgColor() {\n    if (this.row % 2 === 0) {\n      return this.column % 2 === 0 ? 'bg-dark' : 'bg-light';\n    } else {\n      return this.column % 2 === 0 ? 'bg-light' : 'bg-dark';\n    }\n  }\n\n  possibleMoves(squares, options = {}) {\n    if (this.piece) {\n      return this.piece.possibleMoves(squares, this.index, options);\n    }\n\n    return false;\n  }\n}\n","import React from 'react';\nimport Board from './board';\nimport Scoreboard from './scoreboard';\nimport Knight from '../models/knight';\nimport Bishop from '../models/bishop';\nimport King from '../models/king';\nimport Queen from '../models/queen';\nimport Rook from '../models/rook';\nimport Pawn from '../models/pawn';\nimport History from '../models/history';\nimport Player from '../models/player';\nimport Square from '../models/square';\nimport cloneDeep from 'lodash/cloneDeep';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const players = this.setPlayers();\n\n    this.state = {\n      squares: this.initializeBoard(),\n      message: 'Welcome! White\\'s turn.',\n      players: players,\n      current: players['white'],\n      selectedSquare: null,\n      whiteGraveyard: [],\n      blackGraveyard: [],\n      history: new History(),\n      check: false,\n      checkmate: false\n    };\n  }\n\n  initializeBoard() {\n    let squares = Array(64).fill(null);\n\n    // Black pieces\n    squares[0] = new Square(0, 0, 0, new Rook('black'));\n    squares[1] = new Square(1, 0, 1, new Knight('black'));\n    squares[2] = new Square(2, 0, 2, new Bishop('black'));\n    squares[3] = new Square(3, 0, 3, new Queen('black'));\n    squares[4] = new Square(4, 0, 4, new King('black'));\n    squares[5] = new Square(5, 0, 5, new Bishop('black'));\n    squares[6] = new Square(6, 0, 6, new Knight('black'));\n    squares[7] = new Square(7, 0, 7, new Rook('black'));\n\n    // Black pawns\n    squares[8] = new Square(8, 1, 0, new Pawn('black'));\n    squares[9] = new Square(9, 1, 1, new Pawn('black'));\n    squares[10] = new Square(10, 1, 2, new Pawn('black'));\n    squares[11] = new Square(11, 1, 3, new Pawn('black'));\n    squares[12] = new Square(12, 1, 4, new Pawn('black'));\n    squares[13] = new Square(13, 1, 5, new Pawn('black'));\n    squares[14] = new Square(14, 1, 6, new Pawn('black'));\n    squares[15] = new Square(15, 1, 7, new Pawn('black'));\n\n    let index = 16;\n    for (let row = 2; row < 6; row++) {\n      for (let col = 0; col < 8; col++) {\n        squares[index] = new Square(index, row, col);\n        index += 1;\n      }\n    }\n\n    // White pieces\n    squares[56] = new Square(56, 7, 0, new Rook('white'));\n    squares[57] = new Square(57, 7, 1, new Knight('white'));\n    squares[58] = new Square(58, 7, 2, new Bishop('white'));\n    squares[59] = new Square(59, 7, 3, new Queen('white'));\n    squares[60] = new Square(60, 7, 4, new King('white'));\n    squares[61] = new Square(61, 7, 5, new Bishop('white'));\n    squares[62] = new Square(62, 7, 6, new Knight('white'));\n    squares[63] = new Square(63, 7, 7, new Rook('white'));\n\n    // White pawns\n    squares[48] = new Square(48, 6, 0, new Pawn('white'));\n    squares[49] = new Square(49, 6, 1, new Pawn('white'));\n    squares[50] = new Square(50, 6, 2, new Pawn('white'));\n    squares[51] = new Square(51, 6, 3, new Pawn('white'));\n    squares[52] = new Square(52, 6, 4, new Pawn('white'));\n    squares[53] = new Square(53, 6, 5, new Pawn('white'));\n    squares[54] = new Square(54, 6, 6, new Pawn('white'));\n    squares[55] = new Square(55, 6, 7, new Pawn('white'));\n\n    return squares;\n  }\n\n  pieces(squares, color) {\n    const pieces = [];\n\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i].piece && squares[i].piece.color === color) {\n        pieces.push(squares[i]);\n      }\n    }\n\n    return pieces;\n  }\n\n  setPlayers() {\n    let players = {};\n    players['white'] = new Player('white');\n    players['black'] = new Player('black');\n    return players;\n  }\n\n  validateMove(selectedSquare, destinationSquare) {\n    return (\n      selectedSquare.possibleMoves(this.state.squares, { lastMove: this.state.history.lastMove() }).includes(destinationSquare.index)\n      // Make sure the move doesn't put themself in check\n      && !this.check(this.previewMove(selectedSquare, destinationSquare), this.state.current)\n    );\n  }\n\n  previewMove(selectedSquare, destinationSquare, initSquares = this.state.squares) {\n    let squares = cloneDeep(initSquares);\n    squares[destinationSquare.index].piece = selectedSquare.piece;\n    squares[selectedSquare.index].piece = null;\n\n    return squares;\n  }\n\n  validateSelectedSquare(square) {\n    return square.piece?.color === this.state.current.color;\n  }\n\n  handleClick(squareClicked) {\n    let selectedSquare = this.state.selectedSquare;\n\n    // If user clicked on a square with a piece that belongs to them, mark it selected\n    if (this.validateSelectedSquare(squareClicked)) {\n      return this.selectSquare(squareClicked);\n    // Make move if piece is already selected and valid move\n    } else if (selectedSquare && this.validateMove(selectedSquare, squareClicked)) {\n      return this.movePiece(selectedSquare, squareClicked);\n    // Check if user was trying to castle\n    } else if (selectedSquare && this.canCastle(selectedSquare, squareClicked)) {\n      return this.movePiece(selectedSquare, squareClicked, { castle: true });\n    // Check if user was trying to en passant\n    } else if (selectedSquare && this.canEnPassant(selectedSquare, squareClicked)) {\n      return this.movePiece(selectedSquare, squareClicked, { enpassant: true });\n    // If piece was selected then the move was invalid\n    } else if (selectedSquare) {\n      return this.setState(oldState => ({\n        message: 'You cannot move there.'\n      }));\n    // Else user wasn't allowed to click the square\n    } else {\n      return this.setState(oldState => ({\n        message: `Please select one of the ${this.state.current.color} pieces to move.`\n      }));\n    }\n  }\n\n  movePiece(selectedSquare, destinationSquare, options = {}) {\n    let history = this.state.history;\n    let current = this.state.current;\n    let squares = this.state.squares;\n    let blackGraveyard = this.state.blackGraveyard;\n    let whiteGraveyard = this.state.whiteGraveyard;\n    let capture = false;\n    let promotion = false;\n\n    // Add pieces to the graveyard that have been killed\n    if (destinationSquare.piece?.color === 'white') {\n      whiteGraveyard.push(destinationSquare.piece);\n      capture = true;\n    } else if (destinationSquare.piece?.color === 'black') {\n      blackGraveyard.push(destinationSquare.piece);\n      capture = true;\n    }\n\n    // Castling logic to move the Rook into position, if we are indeed castling here\n    if (options.castle) {\n      let rookSquare = this.getCastlingRook(selectedSquare, destinationSquare);\n\n      if (selectedSquare.index > destinationSquare.index) {\n        squares[destinationSquare.index + 1].piece = rookSquare.piece;\n        rookSquare.piece = null;\n      } else {\n        squares[destinationSquare.index - 1].piece = rookSquare.piece;\n        rookSquare.piece = null;\n      }\n    }\n\n    // En passant logic to capture piece is we are indeed doing an en passant move\n    if (options.enpassant) {\n      let enPassantSquare = this.getEnPassantPawn(selectedSquare, destinationSquare);\n\n      // Add pieces to the graveyard that have been killed\n      if (enPassantSquare.piece.color === 'white') {\n        whiteGraveyard.push(enPassantSquare.piece);\n        capture = true;\n      } else if (enPassantSquare.piece.color === 'black') {\n        blackGraveyard.push(enPassantSquare.piece);\n        capture = true;\n      }\n\n      enPassantSquare.piece = null;\n    }\n\n    // Physically move the piece\n    destinationSquare.piece = selectedSquare.piece;\n    selectedSquare.piece = null;\n    // Mark piece as having moved\n    destinationSquare.piece.hasMoved = true;\n\n    if (this.promotion(destinationSquare)) {\n      promotion = true;\n      destinationSquare.piece = new Queen(current.color);\n    }\n\n    // Setting up for the next player's turn\n    let nextPlayer = current.color === 'white' ? this.state.players['black'] : this.state.players['white'];\n    let check = this.check(squares, nextPlayer);\n    let checkmate = false;\n    if (check) {\n      checkmate = this.checkmate(squares, nextPlayer);\n    }\n    let message = `${nextPlayer.color}'s turn. Please select a piece to move.`;\n\n    if (checkmate) {\n      message = `Checkmate! Congrats to ${current.color}. You won!`\n    }\n\n    // Updating game record\n    history.logMove({ current: current, piece: destinationSquare.piece, move_to: destinationSquare.index, move_from: selectedSquare.index, check: check, checkmate: checkmate, capture: capture, promotion: promotion, castle: options.castle, enpassant: options.enpassant });\n\n    this.setState(oldState => ({\n      squares: squares,\n      current: nextPlayer,\n      message: message,\n      selectedSquare: null,\n      history: history,\n      blackGraveyard: blackGraveyard,\n      whiteGraveyard: whiteGraveyard,\n      check: check,\n      checkmate: checkmate\n    }));\n  }\n\n  selectSquare(square) {\n    this.setState(oldState => ({\n      message: `Select where to move ${square.piece.name}`,\n      selectedSquare: square\n    }));\n  }\n\n  check(squares, player) {\n    let kingSquare = squares.find((square) => square.piece?.name === `${player.color} king`);\n    let enemySquares = this.pieces(squares, player.color === 'white' ? 'black' : 'white');\n\n    // Cycle through the enemy pieces\n    for (let idx = 0; idx < enemySquares.length; idx++) {\n      let enemySquare = enemySquares[idx];\n\n      // If any of the enemy pieces has a possible move that includes the king square, return true, check\n      if (enemySquare.possibleMoves(squares).includes(kingSquare.index)) {\n        return true;\n      }\n    }\n\n    // Otherwise no check\n    return false;\n  }\n\n  checkmate(squares, player) {\n    let teammates = this.pieces(squares, player.color);\n\n    // Cycle through the teammates...\n    for (let x = 0; x < teammates.length; x++) {\n      let teammate = teammates[x];\n      let possibleMoves = teammate.possibleMoves(squares);\n\n      // Go through each teammate's possible moves...\n      for (let y = 0; y < possibleMoves.length; y++) {\n        let availableMove = possibleMoves[y];\n\n        // If any move gets the King out of check then return false, no checkmate\n        if (!this.check(this.previewMove(teammate, squares[availableMove], squares), player)) {\n          return false;\n        }\n      }\n    }\n\n    // Otherwise return true. No possible moves left.\n    return true;\n  }\n\n  promotion(square) {\n    if (square.piece.color === 'black') {\n      if (square.row === 7) {\n        return true;\n      }\n    } else {\n      if (square.row === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  canEnPassant(selectedSquare, destinationSquare) {\n    let enemyPawnSquare = this.getEnPassantPawn(selectedSquare, destinationSquare);\n    let lastMove = this.state.history.lastMove();\n\n    // Selected piece must be a pawn\n    if (selectedSquare.piece.constructor.name !== 'Pawn') {\n      return false;\n    }\n\n    if (selectedSquare.piece.color === 'black') {\n      // Check if piece is trying to move diagonal\n      if (destinationSquare.index !== selectedSquare.index + 9 && destinationSquare.index !== selectedSquare.index + 7) {\n        return false;\n      }\n    } else {\n      // Check if piece is trying to move diagonal\n      if (destinationSquare.index !== selectedSquare.index - 9 && destinationSquare.index !== selectedSquare.index - 7) {\n        return false;\n      }\n    }\n\n    // Check if piece we're trying to take is an enemy pawn\n    if (enemyPawnSquare.piece?.color !== selectedSquare.piece.color && enemyPawnSquare.piece?.constructor?.name !== 'Pawn') {\n      return false;\n    }\n\n    // Ensure the piece we're trying to take indeed made the last move and it was a double move\n    if (lastMove.piece !== enemyPawnSquare.piece) {\n      return false;\n    }\n    if (lastMove.move_to !== enemyPawnSquare.index) {\n      return false;\n    }\n\n    // Check if the last move was a pawn double move\n    if (Math.abs(lastMove.move_from - lastMove.move_to) !== 16) {\n      return false;\n    }\n\n    return true;\n  }\n\n  canCastle(selectedSquare, destinationSquare) {\n    // Selected piece must be a king\n    if (selectedSquare.piece.constructor.name !== 'King') {\n      return false;\n    }\n\n    // King must not have moved yet\n    if (selectedSquare.piece.hasMoved) {\n      return false;\n    }\n\n    // There are only two ways to castle, king or queen side, hardcoded the allowed spaces to castle\n    if (selectedSquare.piece.color === 'black') {\n      if (![2, 6].includes(destinationSquare.index)) {\n        return false;\n      }\n    } else {\n      if (![58, 62].includes(destinationSquare.index)) {\n        return false;\n      }\n    }\n\n    // Current player must not be in check\n    if (this.check(this.state.squares, this.state.current)) {\n      return false;\n    }\n\n    // Rook must not have been moved yet\n    let rookSquare = this.getCastlingRook(selectedSquare, destinationSquare);\n    if (rookSquare.piece.hasMoved) {\n      return false;\n    }\n\n    // Squares between the king and the rook must be empty\n    let squaresBetweenKingAndRook = this.squaresBetweenLocations(selectedSquare, rookSquare);\n    for (let i = 0; i < squaresBetweenKingAndRook.length; i++) {\n      if (squaresBetweenKingAndRook[i].piece) {\n        return false;\n      }\n    }\n\n    let squaresBetweenKingAndDestination = this.squaresBetweenLocations(selectedSquare, destinationSquare);\n    let enemySquares = this.pieces(this.state.squares, this.state.current.color === 'white' ? 'black' : 'white');\n    for (let i = 0; i < enemySquares.length; i++) {\n      let possibleMoves = enemySquares[i].possibleMoves(this.state.squares);\n\n      // Make sure no enemy pieces threaten the spaces that the king will move over\n      for (let j = 0; j < squaresBetweenKingAndDestination.length; j++) {\n        if (possibleMoves.includes(squaresBetweenKingAndDestination[j])) {\n          return false;\n        }\n      }\n\n      // Make sure the destination square isn't threatened by any of the enemy pieces\n      if (possibleMoves.includes(destinationSquare.index)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  getCastlingRook(kingSquare, castlingSquare, squares = this.state.squares) {\n    if (castlingSquare.index > kingSquare.index) {\n      if (kingSquare.piece.color === 'black') {\n        return squares[7];\n      } else {\n        return squares[63];\n      }\n    } else {\n      if (kingSquare.piece.color === 'black') {\n        return squares[0];\n      } else {\n        return squares[56];\n      }\n    }\n  }\n\n  getEnPassantPawn(selectedSquare, destinationSquare, squares = this.state.squares) {\n    if (selectedSquare.piece.color === 'black') {\n      return squares[destinationSquare.index - 8];\n    } else {\n      return squares[destinationSquare.index + 8];\n    }\n  }\n\n  squaresBetweenLocations(square1, square2) {\n    const squaresBetween = [];\n\n    if (square1.index > square2.index) {\n      for (let i = square2.index + 1; i < square1.index; i++) {\n        squaresBetween.push(this.state.squares[i]);\n      }\n    } else {\n      for (let i = square1.index + 1; i < square2.index; i++) {\n        squaresBetween.push(this.state.squares[i]);\n      }\n    }\n\n    return squaresBetween;\n  }\n\n  render() {\n    return (\n      <main className=\"container vw-100 vh-100\">\n        <Scoreboard players={this.state.players} current={this.state.current} moves={this.state.history.moves} whiteGraveyard={this.state.whiteGraveyard} blackGraveyard={this.state.blackGraveyard} />\n        <Board squares={this.state.squares} checkmate={this.state.checkmate} message={this.state.message} selectedSquare={this.state.selectedSquare} lastMove={this.state.history.lastMove()} onClick={(index) => this.handleClick(index) }/>\n      </main>\n    );\n  }\n}\n","import './app.css';\nimport Game from './components/game';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"bg-black p-2 white\">\n        <nav className=\"d-grid nav-grid align-items-center\">\n          <a className=\"hide-on-sm font-md\" href=\"https://github.com/gabrieltal/chess\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>\n          <div className=\"d-flex justify-content-center\"><h1 className=\"m-0\">Chess</h1></div>\n          <a className=\"justify-self-end hide-on-sm font-md\" href=\"https://linkedin.com/in/gvtalavera\" target=\"_blank\" rel=\"noopener noreferrer\">Linkedin</a>\n        </nav>\n      </header>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}